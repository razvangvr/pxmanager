<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
        <artifactId>jug-stateless-converter</artifactId>
        <groupId>jug.sibiu.ejb</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
	
	<!--<groupId>jug.sibiu.ejb</groupId>-->
	<artifactId>jug-ejb-standalone-client</artifactId>
	<!--<version>0.0.1-SNAPSHOT</version>-->
	<description>A standalone EJB client </description>

	<properties>
		<!-- JBoss dependency versions -->
		<version.org.jboss.as>7.1.1.Final</version.org.jboss.as>

	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Define the version of JBoss' Java EE 6 APIs we want to use -->
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-6.0 stack (you can read this as 
				the JBoss stack of the Java EE 6 APIs). You can actually use this stack with 
				any version of JBoss AS that implements Java EE 6, not just JBoss AS 7! -->
			<dependency>
				<groupId>org.jboss.as</groupId>
				<artifactId>jboss-as-ejb-client-bom</artifactId>
				<version>${version.org.jboss.as}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- We depend on the Remote Interface -->
		<dependency>
			<groupId>jug.sibiu.ejb</groupId>
			<artifactId>jug-stateless-api</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
	

		<!-- Import the transaction spec API, we use runtime scope because we aren't 
			using any direct reference to the spec API in our client code -->
		<dependency>
			<groupId>org.jboss.spec.javax.transaction</groupId>
			<artifactId>jboss-transaction-api_1.1_spec</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Import the EJB 3.1 API, we use runtime scope because we aren't using 
			any direct reference to EJB spec API in our client code -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- JBoss EJB client API jar. We use runtime scope because the EJB client 
			API isn't directly used in this example. We just need it in our runtime classpath -->
		<dependency>
			<groupId>org.jboss</groupId>
			<artifactId>jboss-ejb-client</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- client communications with the server use XNIO -->
		<dependency>
			<groupId>org.jboss.xnio</groupId>
			<artifactId>xnio-api</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.xnio</groupId>
			<artifactId>xnio-nio</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- The client needs JBoss remoting to access the server -->
		<dependency>
			<groupId>org.jboss.remoting3</groupId>
			<artifactId>jboss-remoting</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Remote EJB accesses can be secured -->
		<dependency>
			<groupId>org.jboss.sasl</groupId>
			<artifactId>jboss-sasl</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- data serialization for invoking remote EJBs -->
		<dependency>
			<groupId>org.jboss.marshalling</groupId>
			<artifactId>jboss-marshalling-river</artifactId>
			<scope>runtime</scope>
		</dependency>

	</dependencies>
</project>